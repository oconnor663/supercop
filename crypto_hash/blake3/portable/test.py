#! /usr/bin/env python3

from pathlib import Path
import shutil
import subprocess
import tempfile

HERE = Path(__file__).parent

MAIN_C = r"""
#include <assert.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "blake3.h"

#define NUM_TESTS 21

size_t INPUT_LENGTHS[NUM_TESTS] = {
  0,
  1,
  1023,
  1024,
  1025,
  2048,
  2049,
  3072,
  3073,
  4096,
  4097,
  5120,
  5121,
  6144,
  6145,
  7168,
  7169,
  8192,
  8193,
  16384,
  31744,
};

uint8_t OUTPUTS[NUM_TESTS][BLAKE3_OUT_LEN] = {
{0xaf,0x13,0x49,0xb9,0xf5,0xf9,0xa1,0xa6,0xa0,0x40,0x4d,0xea,0x36,0xdc,0xc9,0x49,0x9b,0xcb,0x25,0xc9,0xad,0xc1,0x12,0xb7,0xcc,0x9a,0x93,0xca,0xe4,0x1f,0x32,0x62},
{0x2d,0x3a,0xde,0xdf,0xf1,0x1b,0x61,0xf1,0x4c,0x88,0x6e,0x35,0xaf,0xa0,0x36,0x73,0x6d,0xcd,0x87,0xa7,0x4d,0x27,0xb5,0xc1,0x51,0x02,0x25,0xd0,0xf5,0x92,0xe2,0x13},
{0x10,0x10,0x89,0x70,0xee,0xda,0x3e,0xb9,0x32,0xba,0xac,0x14,0x28,0xc7,0xa2,0x16,0x3b,0x0e,0x92,0x4c,0x9a,0x9e,0x25,0xb3,0x5b,0xba,0x72,0xb2,0x8f,0x70,0xbd,0x11},
{0x42,0x21,0x47,0x39,0xf0,0x95,0xa4,0x06,0xf3,0xfc,0x83,0xde,0xb8,0x89,0x74,0x4a,0xc0,0x0d,0xf8,0x31,0xc1,0x0d,0xaa,0x55,0x18,0x9b,0x5d,0x12,0x1c,0x85,0x5a,0xf7},
{0xd0,0x02,0x78,0xae,0x47,0xeb,0x27,0xb3,0x4f,0xae,0xcf,0x67,0xb4,0xfe,0x26,0x3f,0x82,0xd5,0x41,0x29,0x16,0xc1,0xff,0xd9,0x7c,0x8c,0xb7,0xfb,0x81,0x4b,0x84,0x44},
{0xe7,0x76,0xb6,0x02,0x8c,0x7c,0xd2,0x2a,0x4d,0x0b,0xa1,0x82,0xa8,0xbf,0x62,0x20,0x5d,0x2e,0xf5,0x76,0x46,0x7e,0x83,0x8e,0xd6,0xf2,0x52,0x9b,0x85,0xfb,0xa2,0x4a},
{0x5f,0x4d,0x72,0xf4,0x0d,0x7a,0x5f,0x82,0xb1,0x5c,0xa2,0xb2,0xe4,0x4b,0x1d,0xe3,0xc2,0xef,0x86,0xc4,0x26,0xc9,0x5c,0x1a,0xf0,0xb6,0x87,0x95,0x22,0x56,0x30,0x30},
{0xb9,0x8c,0xb0,0xff,0x36,0x23,0xbe,0x03,0x32,0x6b,0x37,0x3d,0xe6,0xb9,0x09,0x52,0x18,0x51,0x3e,0x64,0xf1,0xee,0x2e,0xdd,0x25,0x25,0xc7,0xad,0x1e,0x5c,0xff,0xd2},
{0x71,0x24,0xb4,0x95,0x01,0x01,0x2f,0x81,0xcc,0x7f,0x11,0xca,0x06,0x9e,0xc9,0x22,0x6c,0xec,0xb8,0xa2,0xc8,0x50,0xcf,0xe6,0x44,0xe3,0x27,0xd2,0x2d,0x3e,0x1c,0xd3},
{0x01,0x50,0x94,0x01,0x3f,0x57,0xa5,0x27,0x7b,0x59,0xd8,0x47,0x5c,0x05,0x01,0x04,0x2c,0x0b,0x64,0x2e,0x53,0x1b,0x0a,0x1c,0x8f,0x58,0xd2,0x16,0x32,0x29,0xe9,0x69},
{0x9b,0x40,0x52,0xb3,0x8f,0x1c,0x5f,0xc8,0xb1,0xf9,0xff,0x7a,0xc7,0xb2,0x7c,0xd2,0x42,0x48,0x7b,0x3d,0x89,0x0d,0x15,0xc9,0x6a,0x1c,0x25,0xb8,0xaa,0x0f,0xb9,0x95},
{0x9c,0xad,0xc1,0x5f,0xed,0x8b,0x5d,0x85,0x45,0x62,0xb2,0x6a,0x95,0x36,0xd9,0x70,0x7c,0xad,0xed,0xa9,0xb1,0x43,0x97,0x8f,0x31,0x9a,0xb3,0x42,0x30,0x53,0x58,0x33},
{0x62,0x8b,0xd2,0xcb,0x20,0x04,0x69,0x4a,0xda,0xab,0x7b,0xbd,0x77,0x8a,0x25,0xdf,0x25,0xc4,0x7b,0x9d,0x41,0x55,0xa5,0x5f,0x8f,0xbd,0x79,0xf2,0xfe,0x15,0x4c,0xff},
{0x3e,0x2e,0x5b,0x74,0xe0,0x48,0xf3,0xad,0xd6,0xd2,0x1f,0xaa,0xb3,0xf8,0x3a,0xa4,0x4d,0x3b,0x22,0x78,0xaf,0xb8,0x3b,0x80,0xb3,0xc3,0x51,0x64,0xeb,0xec,0xa2,0x05},
{0xf1,0x32,0x3a,0x86,0x31,0x44,0x6c,0xc5,0x05,0x36,0xa9,0xf7,0x05,0xee,0x5c,0xb6,0x19,0x42,0x4d,0x46,0x88,0x7f,0x3c,0x37,0x6c,0x69,0x5b,0x70,0xe0,0xf0,0x50,0x7f},
{0x61,0xda,0x95,0x7e,0xc2,0x49,0x9a,0x95,0xd6,0xb8,0x02,0x3e,0x2b,0x0e,0x60,0x4e,0xc7,0xf6,0xb5,0x0e,0x80,0xa9,0x67,0x8b,0x89,0xd2,0x62,0x8e,0x99,0xad,0xa7,0x7a},
{0xa0,0x03,0xfc,0x7a,0x51,0x75,0x4a,0x9b,0x3c,0x7f,0xae,0x03,0x67,0xab,0x3d,0x78,0x2d,0xcc,0xf2,0x88,0x55,0xa0,0x3d,0x43,0x5f,0x8c,0xfe,0x74,0x60,0x5e,0x78,0x17},
{0xaa,0xe7,0x92,0x48,0x4c,0x8e,0xfe,0x4f,0x19,0xe2,0xca,0x7d,0x37,0x1d,0x8c,0x46,0x7f,0xfb,0x10,0x74,0x8d,0x8a,0x5a,0x1a,0xe5,0x79,0x94,0x8f,0x71,0x8a,0x2a,0x63},
{0xba,0xb6,0xc0,0x9c,0xb8,0xce,0x8c,0xf4,0x59,0x26,0x13,0x98,0xd2,0xe7,0xae,0xf3,0x57,0x00,0xbf,0x48,0x81,0x16,0xce,0xb9,0x4a,0x36,0xd0,0xf5,0xf1,0xb7,0xbc,0x3b},
{0xf8,0x75,0xd6,0x64,0x6d,0xe2,0x89,0x85,0x64,0x6f,0x34,0xee,0x13,0xbe,0x9a,0x57,0x6f,0xd5,0x15,0xf7,0x6b,0x5b,0x0a,0x26,0xbb,0x32,0x47,0x35,0x04,0x1d,0xdd,0xe4},
{0x62,0xb6,0x96,0x0e,0x1a,0x44,0xbc,0xc1,0xeb,0x1a,0x61,0x1a,0x8d,0x62,0x35,0xb6,0xb4,0xb7,0x8f,0x32,0xe7,0xab,0xc4,0xfb,0x4c,0x6c,0xdc,0xce,0x94,0x89,0x5c,0x47}
};

int main() {
  for (size_t test_num = 0; test_num < NUM_TESTS; test_num++) {
    size_t input_len = INPUT_LENGTHS[test_num];
    printf("test input length %ld\n", input_len);
    uint8_t *input = malloc(input_len);
    assert(input != NULL);
    for (size_t i = 0; i < input_len; i++) {
      input[i] = i % 251;
    }
    uint8_t output[BLAKE3_OUT_LEN];
    blake3_default_hash(input, input_len, output);
    assert(memcmp(OUTPUTS[test_num], output, BLAKE3_OUT_LEN) == 0);
  }
  return 0;
}
"""


def main():
    tempdir = tempfile.mkdtemp(prefix="supercop_test.")
    print(tempdir)
    with (Path(tempdir) / "main.c").open("w") as mainfile:
        mainfile.write(MAIN_C)
    c_files = []
    for filepath in HERE.iterdir():
        if filepath.name.startswith("blake3"):
            shutil.copy(filepath, tempdir)
            if filepath.suffix in (".c", ".S"):
                c_files.append(filepath.name)
    cmd = ["gcc", "-O3", "-march=native", "-o", "blake3.exe", "main.c"]
    cmd += c_files
    print(" ".join(cmd))
    subprocess.run(cmd, check=True, cwd=tempdir)
    subprocess.run([Path(tempdir) / "blake3.exe"], check=True, cwd=tempdir)


if __name__ == "__main__":
    main()
