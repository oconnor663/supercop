use std::os::raw::{c_int,c_ulonglong};

#[no_mangle]
pub unsafe extern "C"
fn CRYPTO_NAMESPACE(encrypt)(
  c_c:*mut u8,c_clen:*mut c_ulonglong,
  c_m:*const u8,c_mlen:c_ulonglong,
  c_ad:*const u8,c_adlen:c_ulonglong,
  c_nsec:*const u8,
  c_npub:*const u8,
  c_k:*const u8,
) -> c_int {
  let mlen:usize = c_mlen.try_into().unwrap();
  let c = slice::from_raw_parts_mut(c_c,mlen+CRYPTO_ABYTES);
  let m = slice::from_raw_parts(c_m,mlen);
  let adlen:usize = c_adlen.try_into().unwrap();
  let ad = slice::from_raw_parts(c_ad,adlen);
  let nsec = slice::from_raw_parts(c_nsec,CRYPTO_NSECBYTES);
  let nsec:&[u8;CRYPTO_NSECBYTES] = nsec.try_into().unwrap();
  let npub = slice::from_raw_parts(c_npub,CRYPTO_NPUBBYTES);
  let npub:&[u8;CRYPTO_NPUBBYTES] = npub.try_into().unwrap();
  let k = slice::from_raw_parts(c_k,CRYPTO_KEYBYTES);
  let k:&[u8;CRYPTO_KEYBYTES] = k.try_into().unwrap();
  let clen:usize = crypto_aead::crypto_aead_encrypt(c,m,ad,nsec,npub,k);
  *c_clen = clen.try_into().unwrap();
  0
}

#[no_mangle]
pub unsafe extern "C"
fn CRYPTO_NAMESPACE(decrypt)(
  c_m:*mut u8,c_mlen:*mut c_ulonglong,
  c_nsec:*mut u8,
  c_c:*const u8,c_clen:c_ulonglong,
  c_ad:*const u8,c_adlen:c_ulonglong,
  c_npub:*const u8,
  c_k:*const u8,
) -> c_int {
  let clen:usize = c_clen.try_into().unwrap();
  let m = slice::from_raw_parts_mut(c_m,clen);
  let nsec = slice::from_raw_parts_mut(c_nsec,CRYPTO_NSECBYTES);
  let nsec:&mut[u8;CRYPTO_NSECBYTES] = nsec.try_into().unwrap();
  let c = slice::from_raw_parts(c_c,clen);
  let adlen:usize = c_adlen.try_into().unwrap();
  let ad = slice::from_raw_parts(c_ad,adlen);
  let npub = slice::from_raw_parts(c_npub,CRYPTO_NPUBBYTES);
  let npub:&[u8;CRYPTO_NPUBBYTES] = npub.try_into().unwrap();
  let k = slice::from_raw_parts(c_k,CRYPTO_KEYBYTES);
  let k:&[u8;CRYPTO_KEYBYTES] = k.try_into().unwrap();
  let (mlen,result):(usize,isize) = crypto_aead::crypto_aead_decrypt(m,nsec,c,ad,npub,k);
  *c_mlen = mlen.try_into().unwrap();
  result as c_int
}
