#ifndef MPFQ_NAME_K_H_
#define MPFQ_NAME_K_H_

/* Automatically generated file.
 *
 * This header file is just wrap-up code for accessing a global finite
 * field with convenient aliases.
 *
 * Note that this file is automatically generated from the mpfq api, and
 * is therefore guaranteed to contain all the api functions usable in the
 * current realm.
 */

#ifndef MPFQ_LAST_GENERATED_TAG
#error "Please include an mpfq-generated header first"
#endif

/* cpp has its infelicities. Yes the extra step is needed */
#ifndef MPFQ_CONCAT4
#define MPFQ_CONCAT4(X,Y,Z,T) X ## Y ## Z ## T
#endif

#ifndef MPFQ_CREATE_FUNCTION_NAME
#define MPFQ_CREATE_FUNCTION_NAME(TAG,NAME) MPFQ_CONCAT4(mpfq_,TAG,_,NAME)
#endif

#define Kcommon_name_(X) MPFQ_CREATE_FUNCTION_NAME(MPFQ_LAST_GENERATED_TAG,X)

#define Kfield	Kcommon_name_(field)
#define Kdst_field	Kcommon_name_(dst_field)

#define Kelt	Kcommon_name_(elt)
#define Kdst_elt	Kcommon_name_(dst_elt)
#define Ksrc_elt	Kcommon_name_(src_elt)

#define Kelt_ur	Kcommon_name_(elt_ur)
#define Kdst_elt_ur	Kcommon_name_(dst_elt_ur)
#define Ksrc_elt_ur	Kcommon_name_(src_elt_ur)

#define Kfield_characteristic(a0)	Kcommon_name_(field_characteristic) (K,a0)
#define Kfield_degree()	Kcommon_name_(field_degree) (K)
#define Kfield_init()	Kcommon_name_(field_init) (K)
#define Kfield_clear()	Kcommon_name_(field_clear) (K)
#define Kfield_specify(a0,a1)	Kcommon_name_(field_specify) (K,a0,a1)
#define Kfield_setopt(a0,a1)	Kcommon_name_(field_setopt) (K,a0,a1)

#define Kinit(a0)	Kcommon_name_(init) (K,a0)
#define Kclear(a0)	Kcommon_name_(clear) (K,a0)

#define Kset(a0,a1)	Kcommon_name_(set) (K,a0,a1)
#define Kset_ui(a0,a1)	Kcommon_name_(set_ui) (K,a0,a1)
#define Kget_ui(a0)	Kcommon_name_(get_ui) (K,a0)
#define Kset_mpn(a0,a1,a2)	Kcommon_name_(set_mpn) (K,a0,a1,a2)
#define Kset_mpz(a0,a1)	Kcommon_name_(set_mpz) (K,a0,a1)
#define Kget_mpn(a0,a1)	Kcommon_name_(get_mpn) (K,a0,a1)
#define Kget_mpz(a0,a1)	Kcommon_name_(get_mpz) (K,a0,a1)
#define Kset_uipoly(a0,a1)	Kcommon_name_(set_uipoly) (K,a0,a1)
#define Kset_uipoly_wide(a0,a1,a2)	Kcommon_name_(set_uipoly_wide) (K,a0,a1,a2)
#define Kget_uipoly(a0)	Kcommon_name_(get_uipoly) (K,a0)
#define Kget_uipoly_wide(a0,a1)	Kcommon_name_(get_uipoly_wide) (K,a0,a1)

#define Krandom(a0)	Kcommon_name_(random) (K,a0)
#define Krandom2(a0)	Kcommon_name_(random2) (K,a0)

#define Kadd(a0,a1,a2)	Kcommon_name_(add) (K,a0,a1,a2)
#define Ksub(a0,a1,a2)	Kcommon_name_(sub) (K,a0,a1,a2)
#define Kneg(a0,a1)	Kcommon_name_(neg) (K,a0,a1)
#define Kmul(a0,a1,a2)	Kcommon_name_(mul) (K,a0,a1,a2)
#define Ksqr(a0,a1)	Kcommon_name_(sqr) (K,a0,a1)
#define Kis_sqr(a0)	Kcommon_name_(is_sqr) (K,a0)
#define Ksqrt(a0,a1)	Kcommon_name_(sqrt) (K,a0,a1)
#define Kpow(a0,a1,a2,a3)	Kcommon_name_(pow) (K,a0,a1,a2,a3)
#define Kfrobenius(a0,a1)	Kcommon_name_(frobenius) (K,a0,a1)
#define Kadd_ui(a0,a1,a2)	Kcommon_name_(add_ui) (K,a0,a1,a2)
#define Ksub_ui(a0,a1,a2)	Kcommon_name_(sub_ui) (K,a0,a1,a2)
#define Kmul_ui(a0,a1,a2)	Kcommon_name_(mul_ui) (K,a0,a1,a2)
#define Kadd_uipoly(a0,a1,a2)	Kcommon_name_(add_uipoly) (K,a0,a1,a2)
#define Ksub_uipoly(a0,a1,a2)	Kcommon_name_(sub_uipoly) (K,a0,a1,a2)
#define Kmul_uipoly(a0,a1,a2)	Kcommon_name_(mul_uipoly) (K,a0,a1,a2)
#define Kinv(a0,a1)	Kcommon_name_(inv) (K,a0,a1)
#define Kas_solve(a0,a1)	Kcommon_name_(as_solve) (K,a0,a1)
#define Ktrace(a0)	Kcommon_name_(trace) (K,a0)
#define Khadamard(a0,a1,a2,a3)	Kcommon_name_(hadamard) (K,a0,a1,a2,a3)

#define Kelt_ur_init(a0)	Kcommon_name_(elt_ur_init) (K,a0)
#define Kelt_ur_clear(a0)	Kcommon_name_(elt_ur_clear) (K,a0)
#define Kelt_ur_set(a0,a1)	Kcommon_name_(elt_ur_set) (K,a0,a1)
#define Kelt_ur_add(a0,a1,a2)	Kcommon_name_(elt_ur_add) (K,a0,a1,a2)
#define Kelt_ur_neg(a0,a1)	Kcommon_name_(elt_ur_neg) (K,a0,a1)
#define Kelt_ur_sub(a0,a1,a2)	Kcommon_name_(elt_ur_sub) (K,a0,a1,a2)
#define Kmul_ur(a0,a1,a2)	Kcommon_name_(mul_ur) (K,a0,a1,a2)
#define Ksqr_ur(a0,a1)	Kcommon_name_(sqr_ur) (K,a0,a1)
#define Kreduce(a0,a1)	Kcommon_name_(reduce) (K,a0,a1)

#define Kcmp(a0,a1)	Kcommon_name_(cmp) (K,a0,a1)
#define Kcmp_ui(a0,a1)	Kcommon_name_(cmp_ui) (K,a0,a1)

#define Kvec_init(a0,a1)	Kcommon_name_(vec_init) (K,a0,a1)
#define Kvec_clear(a0,a1)	Kcommon_name_(vec_clear) (K,a0,a1)

#define Kmgy_enc(a0,a1)	Kcommon_name_(mgy_enc) (K,a0,a1)
#define Kmgy_dec(a0,a1)	Kcommon_name_(mgy_dec) (K,a0,a1)

#define Kasprint(a0,a1)	Kcommon_name_(asprint) (K,a0,a1)
#define Kfprint(a0,a1)	Kcommon_name_(fprint) (K,a0,a1)
#define Kprint(a0)	Kcommon_name_(print) (K,a0)
#define Ksscan(a0,a1)	Kcommon_name_(sscan) (K,a0,a1)
#define Kfscan(a0,a1)	Kcommon_name_(fscan) (K,a0,a1)
#define Kscan(a0)	Kcommon_name_(scan) (K,a0)

/* customary link reference to the field -- forces good habit of defining
   it somewhere */
extern Kfield K;

/* another customary shorthand */
#define	Kdegree	Kfield_degree()


#endif  /* MPFQ_NAME_K_H_ */
