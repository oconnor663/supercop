#ifndef MPFQ_NAME_K_H_
#define MPFQ_NAME_K_H_

/* Automatically generated file.
 *
 * This header file is just wrap-up code for accessing a global finite
 * field with convenient aliases.
 *
 * Note that this file is automatically generated from the mpfq api, and
 * is therefore guaranteed to contain all the api functions usable in the
 * current realm.
 */
#define Kfield	MPFQ_(field)
#define Kfield_ptr	MPFQ_(field_ptr)

#define Kelt	MPFQ_(elt)
#define Kdst_elt MPFQ_(dst_elt)
#define Ksrc_elt MPFQ_(src_elt)

#define Kelt_ur	MPFQ_(elt_ur)
#define Kdst_ur	MPFQ_(dst_ur)
#define Ksrc_ur	MPFQ_(src_ur)

#define Kfield_degree()	MPFQ_(field_degree) (K)
#define Kfield_init()	MPFQ_(field_init) (K)
#define Kfield_clear()	MPFQ_(field_clear) (K)
#define Kfield_specify(a0,a1)	MPFQ_(field_specify) (K,a0,a1)
#define Kfield_setopt(a0,a1)	MPFQ_(field_setopt) (K,a0,a1)

#define Kinit(a0)	MPFQ_(init) (K,a0)
#define Kclear(a0)	MPFQ_(clear) (K,a0)

#define Kset(a0,a1)	MPFQ_(set) (K,a0,a1)
#define Kset_ui(a0,a1)	MPFQ_(set_ui) (K,a0,a1)
#define Kget_ui(a0)	MPFQ_(get_ui) (K,a0)
#define Kset_mpn(a0,a1,a2)	MPFQ_(set_mpn) (K,a0,a1,a2)
#define Kset_mpz(a0,a1)	MPFQ_(set_mpz) (K,a0,a1)
#define Kget_mpn(a0,a1)	MPFQ_(get_mpn) (K,a0,a1)
#define Kget_mpz(a0,a1)	MPFQ_(get_mpz) (K,a0,a1)
#define Kset_uipoly(a0,a1)	MPFQ_(set_uipoly) (K,a0,a1)
#define Kset_uipoly_wide(a0,a1,a2)	MPFQ_(set_uipoly_wide) (K,a0,a1,a2)
#define Kget_uipoly(a0)	MPFQ_(get_uipoly) (K,a0)
#define Kget_uipoly_wide(a0,a1,a2)	MPFQ_(get_uipoly_wide) (K,a0,a1,a2)

#define Krandom(a0)	MPFQ_(random) (K,a0)
#define Krandom2(a0)	MPFQ_(random2) (K,a0)

#define Kadd(a0,a1,a2)	MPFQ_(add) (K,a0,a1,a2)
#define Ksub(a0,a1,a2)	MPFQ_(sub) (K,a0,a1,a2)
#define Kmul(a0,a1,a2)	MPFQ_(mul) (K,a0,a1,a2)
#define Ksqr(a0,a1)	MPFQ_(sqr) (K,a0,a1)
#define Ksqrt(a0,a1)	MPFQ_(sqrt) (K,a0,a1)
#define Kfrobenius(a0,a1)	MPFQ_(frobenius) (K,a0,a1)
#define Kadd_ui(a0,a1,a2)	MPFQ_(add_ui) (K,a0,a1,a2)
#define Ksub_ui(a0,a1,a2)	MPFQ_(sub_ui) (K,a0,a1,a2)
#define Kmul_ui(a0,a1,a2)	MPFQ_(mul_ui) (K,a0,a1,a2)
#define Kinv(a0,a1)	MPFQ_(inv) (K,a0,a1)
#define Kas_solve(a0,a1)	MPFQ_(as_solve) (K,a0,a1)
#define Ktrace(a0)	MPFQ_(trace) (K,a0)

#define Kelt_ur_init(a0)	MPFQ_(elt_ur_init) (K,a0)
#define Kelt_ur_clear(a0)	MPFQ_(elt_ur_clear) (K,a0)
#define Kmul_ur(a0,a1,a2)	MPFQ_(mul_ur) (K,a0,a1,a2)
#define Ksqr_ur(a0,a1)	MPFQ_(sqr_ur) (K,a0,a1)
#define Kreduce(a0,a1)	MPFQ_(reduce) (K,a0,a1)

#define Kcmp(a0,a1)	MPFQ_(cmp) (K,a0,a1)
#define Kcmp_ui(a0,a1)	MPFQ_(cmp_ui) (K,a0,a1)

#define Kvec_init(a0,a1)	MPFQ_(vec_init) (K,a0,a1)
#define Kvec_clear(a0,a1)	MPFQ_(vec_clear) (K,a0,a1)

#define Kprint(a0,a1)	MPFQ_(print) (K,a0,a1)

/* customary link reference to the field -- forces good habit of defining
   it somewhere */
extern Kfield K;

/* another customary shorthand */
#define	Kdegree	Kfield_degree()


#endif  /* MPFQ_NAME_K_H_ */
